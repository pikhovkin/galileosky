from unittest import TestCase
from contextlib import contextmanager

from galileosky import Packet, tags


class Test(TestCase):
    @staticmethod
    @contextmanager
    def register_custom_tag(tag):
        old_tag = tags.tags[tag.id]
        Packet.register(tag)
        yield
        Packet.register(old_tag)

    def _test_packet(self, msg):
        headers, data = Packet.unpack(msg)
        packet = Packet()
        for record in data:
            for k, v in record.items():
                packet.add(k, v)

        data, crc16 = packet.pack(is_archive=headers['is_archive'])
        self.assertTrue(data == msg)
        self.assertTrue(headers['crc16'] == crc16)

    def test_first_packet(self):
        # msg = bytes.fromhex('0117800182021003383632303537303437373435353331043200B548')
        msg = bytes.fromhex('01178004320020E17ADF52300EAC4F5E0340B610053300004604A2FE')
        self._test_packet(msg)

    def test_main_packet(self):
        msg = bytes.fromhex
        self._test_packet(msg)

    def test_unpack_with_header_packet(self):
        HARDWARE = 10
        BASE_FIRMWARE = 20
        NULL_FIRMWARE = 0
        FIRMWARE = 1

        class Tag02(tags.Tag02):
            @classmethod
            def to_dict(cls, value, record, header_packet, conf):
                hw = record.get(tags.Tag01.id, header_packet.get(tags.Tag01.id, {})).get('hardware', 0)
                if hw == HARDWARE:
                    return {cls.name: FIRMWARE}
                return {cls.name: NULL_FIRMWARE}

        packet = Packet()
        packet.add(tags.Tag02.id, dict(firmware=BASE_FIRMWARE))
        data, crc16 = packet.pack()

        headers, packet = Packet.extract(data)
        self.assertTrue(packet[0][tags.Tag02.id]['firmware'] == BASE_FIRMWARE)

        with self.register_custom_tag(Tag02):
            headers, packet = Packet.extract(data)
            self.assertTrue(packet[0][tags.Tag02.id]['firmware'] == NULL_FIRMWARE)

        header_packet = {
            tags.Tag01.id: {'hardware': HARDWARE}
        }
        with self.register_custom_tag(Tag02):
            headers, packet = Packet.extract(data, header_packet=header_packet)
            self.assertTrue(packet[0][tags.Tag02.id]['firmware'] == FIRMWARE)

        header_packet = {
            1: {'hardware': 9}
        }
        with self.register_custom_tag(Tag02):
            headers, packet = Packet.extract(data, header_packet=header_packet)
            self.assertTrue(packet[0][tags.Tag02.id]['firmware'] == NULL_FIRMWARE)
